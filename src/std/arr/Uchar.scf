/*
Copyright (c) 2021 SWARMBJECT contributors

Redistribution and use in source and binary forms,
with or without modification, are permitted
provided that the following conditions are met:

1. Redistributions of source code must
retain the above copyright notice, this list
of conditions and the following disclaimer.

2. Redistributions in binary form must
reproduce the above copyright notice,
this list of conditions and the following
disclaimer in the documentation and/or other
materials provided with the distribution.

Subject to the terms and conditions of this
license, each copyright holder and contributor
hereby grants to those receiving rights under this
license a perpetual, worldwide, non-exclusive,
no-charge, royalty-free, irrevocable (except for
failure to satisfy the conditions of this license)
patent license to make, have made, use, offer to
sell, sell, import, and otherwise transfer this
software, where such license applies only to
those patent claims, already acquired or hereafter
acquired, licensable by such copyright holder or
contributor that are necessarily infringed by:

(a) their Contribution(s) (the licensed
copyrights of copyright holders and
non-copyrightable additions of contributors,
in source or binary form) alone; or

(b) combination of their Contribution(s)
with the work of authorship to which such
Contribution(s) was added by such copyright
holder or contributor, if, at the time the
Contribution is added, such addition causes
such combination to be necessarily infringed.
The patent license shall not apply to any other
combinations which include the Contribution.

Except as expressly stated above, no rights or
licenses from any copyright holder or contributor
is granted under this license, whether expressly,
by implication, estoppel or otherwise.

DISCLAIMER

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
*/
class Uchar {

	/* Public member functions. */

	/* 0 if equals, + if src > dst, - otherwise. */
	static unsigned char compare(
		unsigned char[] src, unsigned int i,
		unsigned char[] dst, unsigned int j, unsigned int len){
		len = i + len;
		while (i < len){
			unsigned char srcChar = src[i];
			unsigned char dstChar = dst[j];
			if (srcChar != dstChar){
				if (srcChar > dstChar)
					{return std::Compare::greater;}
				return std::Compare::less;
			}
			i = i + 1;
			j = j + 1;
		}
		return std::Compare::equal;
	}

	static unsigned char compareRange(
		unsigned char[] src, unsigned int i,
		unsigned int srcLen, unsigned char[] dst,
		unsigned int j, unsigned int dstLen){
		unsigned int len;
		if (srcLen > dstLen){
			len = dstLen;
		} else {
			len = srcLen;
		}
		unsigned char cmp = compare(src, i, dst, j, len);
		if (cmp == std::Compare::equal && 
			dstLen != srcLen){
			if (srcLen > dstLen) 
				{return std::Compare::greater;}
			return std::Compare::less;
		}
		return cmp;
	}

	static unsigned char compareValue(
		unsigned char src, unsigned char dst){
		if (src < dst) {return std::Compare::less;}
		else if (src == dst) {return std::Compare::equal;}
		return std::Compare::greater;
	}

	/* Works even if overlapping. */
	static void copy(unsigned char[] src, unsigned int i,
		unsigned char[] dst, unsigned int j, unsigned int len){
		if (i > j){
			len = i + len;
			while (i < len){
				dst[j] = src[i];
				i = i + 1;
				j = j + 1;
			}
		} else {
			while (len > 0){
				len = len - 1;
				dst[j + len] = src[i + len];
			}
		}
	}
	
	static unsigned int find(
		unsigned char c, unsigned char[] src,
		unsigned int start, unsigned int max){
		max = max + start;
		while (start < max){
			if (c == src[start]) {return start + 1;}
			start = start + 1;
		}
		return 0;
	}
	
	static unsigned int findLast(
		unsigned char c, unsigned char[] src,
		unsigned int end, unsigned int max){
		max = max + end;
		while (max > end){
			max = max - 1;
			if (c == src[max]) {return max + 1;}
		}
		return 0;
	}
	
	static unsigned int findLastRange(
		unsigned char[] src, unsigned int i,
		unsigned int len, unsigned char[] dst,
		unsigned int end, unsigned int max){
		if (len <= max){
			max = end + max - len + 1;
			unsigned int j;
			while (max > end){
				max = max - 1;
				j = 0;
				while (j < len){
					if (src[i + j] != dst[max + j]) {break;}
					j = j + 1;
				}
				if (j == len) {return max + 1;}
			}
		}
		return 0;
	}
	
	static unsigned int findRange(
		unsigned char[] src, unsigned int i,
		unsigned int len, unsigned char[] dst,
		unsigned int start, unsigned int max){
		if (len <= max){
			max = start + max - len;
			unsigned int j;
			while (start <= max){
				j = 0;
				while (j < len){
					if (src[i + j] != dst[start + j]) {break;}
					j = j + 1;
				}
				start = start + 1;
				if (j == len) {return start;}
			}
		}
		return 0;
	}
	
	static unsigned int findSorted(
		unsigned char c, unsigned char[] src,
		unsigned int start, unsigned int max){
		max = max + start;
		/* Trick using offset by 1 to keep variables as unsigned. */
		start = start + 1;
		unsigned int mid;
		while (max >= start){
			mid = (max + start) >> 1;
			unsigned char element = src[mid - 1];
			if (c < element){
				max = mid - 1;
			} else if (c == element){
				return mid;
			} else {
				start = mid + 1;
			}
		}
		return 0;
	}

	static unsigned short getU16BE(
		unsigned char[] src, unsigned int start){
		return src[start] << 8 | src[start + 1];
	}

	static unsigned short getU16LE(
		unsigned char[] src, unsigned int start){
		return src[start] | src[start + 1] << 8;
	}

	static unsigned int getU32BE(
		unsigned char[] src, unsigned int start){
		return src[start] << 24 | src[start + 1] << 16 |
			src[start + 2] << 8 | src[start + 3];
	}

	static unsigned int getU32LE(
		unsigned char[] src, unsigned int start){
		return src[start] | src[start + 1] << 8 |
			src[start + 2] << 16 | src[start + 3] << 24;
	}
	
	/* Returns str's size if all occurences of src 
		would be replaced with dst. */
	static unsigned int replacedSize(
		unsigned char[] str, unsigned int strStart,
		unsigned int strLen, unsigned char[] src,
		unsigned int srcStart, unsigned int srcLen,
		unsigned int dstLen){
		unsigned int addLen = 0;
		if (srcLen == 0) {return strLen;}
		strLen = strLen + strStart;
		while (strStart < strLen){
			if (strLen - strStart >= srcLen){
				if (compare(str, strStart,
						src, srcStart, srcLen) == 
					std::Compare::equal){
					addLen = addLen + dstLen;
					strStart = strStart + srcLen;
					continue;
				}
			}
			addLen = addLen + 1;
			strStart = strStart + 1;
		}
		return addLen;
	}
	
	static void reverse(unsigned char[] src,
		unsigned int start, unsigned int len){
		if (len <= 1) {return;}
		len = len + start - 1;
		while (len > start){
			switchValue(&src[start], &src[len]);
			start = start + 1;
			len = len - 1;
		}
	}
	
	/* Sets str to the data but
		all occurences of src is replaced with dst.
		Currently does not support if str is a subarray of data. */
	static void setReplace(
		unsigned char[] data, unsigned int dataStart,
		unsigned char[] str, unsigned int strStart,
		unsigned int strLen, unsigned char[] src,
		unsigned int srcStart, unsigned int srcLen,
		unsigned char[] dst, unsigned int dstStart,
		unsigned int dstLen){
		strLen = strLen + strStart;
		while (strStart < strLen){
			if (strLen - strStart >= srcLen){
				if (compare(str, strStart,
						src, srcStart, srcLen) == 
					std::Compare::equal){
					copy(dst, dstStart,
						data, dataStart, dstLen);
					dataStart = dataStart + dstLen;
					strStart = strStart + srcLen;
					continue;
				}
			}
			data[dataStart] = str[strStart];
			dataStart = dataStart + 1;
			strStart = strStart + 1;
		}
	}
	
	static void setU16BE(
		unsigned char[] src, unsigned int start,
		unsigned short setShort){
		src[start] = setShort >> 8;
		src[start + 1] = setShort & 0xFF;
	}

	static void setU16LE(
		unsigned char[] src, unsigned int start,
		unsigned short setShort){
		src[start] = setShort & 0xFF;
		src[start + 1] = setShort >> 8;
	}

	static void setU32BE(
		unsigned char[] src, unsigned int start,
		unsigned int setInt){
		src[start] = setInt >> 24;
		src[start + 1] = setInt >> 16 & 0xFF;
		src[start + 2] = setInt >> 8 & 0xFF;
		src[start + 3] = setInt & 0xFF;
	}

	static void setU32LE(
		unsigned char[] src, unsigned int start,
		unsigned int setInt){
		src[start] = setInt & 0xFF;
		src[start + 1] = setInt >> 8 & 0xFF;
		src[start + 2] = setInt >> 16 & 0xFF;
		src[start + 3] = setInt >> 24;
	}
	
	static void switchValue(unsigned char* src,
		unsigned char* dst){
		unsigned char tmp = *src;
		*src = *dst;
		*dst = tmp;
	}

}