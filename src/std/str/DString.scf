/*
Copyright (c) 2021 SWARMBJECT contributors

Redistribution and use in source and binary forms,
with or without modification, are permitted
provided that the following conditions are met:

1. Redistributions of source code must
retain the above copyright notice, this list
of conditions and the following disclaimer.

2. Redistributions in binary form must
reproduce the above copyright notice,
this list of conditions and the following
disclaimer in the documentation and/or other
materials provided with the distribution.

Subject to the terms and conditions of this
license, each copyright holder and contributor
hereby grants to those receiving rights under this
license a perpetual, worldwide, non-exclusive,
no-charge, royalty-free, irrevocable (except for
failure to satisfy the conditions of this license)
patent license to make, have made, use, offer to
sell, sell, import, and otherwise transfer this
software, where such license applies only to
those patent claims, already acquired or hereafter
acquired, licensable by such copyright holder or
contributor that are necessarily infringed by:

(a) their Contribution(s) (the licensed
copyrights of copyright holders and
non-copyrightable additions of contributors,
in source or binary form) alone; or

(b) combination of their Contribution(s)
with the work of authorship to which such
Contribution(s) was added by such copyright
holder or contributor, if, at the time the
Contribution is added, such addition causes
such combination to be necessarily infringed.
The patent license shall not apply to any other
combinations which include the Contribution.

Except as expressly stated above, no rights or
licenses from any copyright holder or contributor
is granted under this license, whether expressly,
by implication, estoppel or otherwise.

DISCLAIMER

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
*/
class DString {

	unsigned int capacity;
	unsigned char[] data;
	/* Number of chars excluding the ending 0. */
	unsigned int length;
	
	DString(){
		capacity = 0;
		data = nullptr;
		length = 0;
	}

	~DString(){
		delete[] data;
	}

	void addJsStr(void* str){
		unsigned int len = std::js::String::length(str);
		if (len == 0) {return;}
		unsigned int previousLength = length;
		unsigned char[] newData =
			addLength(len, true, true);
		std::js::String::encode(str, 
			newData, previousLength);
		newData[previousLength + len] = 0;
	}

	void addJsSubarray(void* array,
		unsigned int start, unsigned int len){
		if (len == 0) {return;}
		unsigned int previousLength = length;
		unsigned char[] newData =
			addLength(len, true, true);
		std::js::Array::get(
			array, start, newData, previousLength, len);
		newData[previousLength + len] = 0;
	}

	void addJsSubview(void* view,
		unsigned int start, unsigned int len){
		if (len == 0) {return;}
		unsigned int previousLength = length;
		unsigned char[] newData =
			addLength(len, true, true);
		std::js::DataView::get(
			view, start, newData, previousLength, len);
		newData[previousLength + len] = 0;
	}
	
	/* Does not sets the ending 0, as the
		previous data could still be used. */
	unsigned char[] addLength(
		unsigned int len, bool copy, bool del){
		unsigned int previousLength = length;
		/* Including the ending 0. */
		unsigned int newLength = previousLength + len + 1;
		unsigned int newCapacity = capacity;
		unsigned char[] newData;
		if (newCapacity < newLength){
			if (newCapacity == 0){
				newCapacity = newLength;
				newData = new unsigned char[newCapacity];
			} else {
				newCapacity = newCapacity * 2;
				if (newCapacity < newLength) {newCapacity = newLength;}
				unsigned char[] previousData = data;
				newData = new unsigned char[newCapacity];
				if (copy){
					std::arr::Uchar::copy(previousData, 0,
						newData, 0, previousLength);
				}
				if (del) {delete[] previousData;}
			}
			data = newData;
			capacity = newCapacity;
		} else {
			newData = data;
		}
		length = newLength - 1;
		return newData;
	}
	
	void debug(){
		unsigned int len = length;
		void* stringObject = std::js::String::decode(&data[0], len);
		constwrite "	alert('length: ' + len +\n"
			"		' capacity: ' + ";
		constwrite capacity;
		constwrite
			" + ' ' + stringObject);\n";
	}
	
	unsigned char[] insertLength(unsigned int len,
		unsigned int start){
		unsigned int previousLength = length;
		if (start > previousLength) {return nullptr;}
		unsigned char[] previousData = data;
		unsigned char[] newData = addLength(len, false, false);
		std::arr::Uchar::copy(previousData, start,
			newData, start + len, previousLength - start);
		if (newData != previousData){
			std::arr::Uchar::copy(previousData, 0,
				newData, 0, start);
			delete[] previousData;
		}
		newData[previousLength + len] = 0;
		return newData;
	}

	void setJsArray(void* array){
		unsigned int len;
		constwrite "len = array.byteLength;";
		unsigned char[] newData =
			setLength(len);
		std::js::Array::get(array, 0, newData, 0, len);
		newData[len] = 0;
	}

	unsigned char[] setLength(unsigned int len){
		unsigned char[] newData;
		unsigned int previousLength = length;
		if (len > previousLength){
			newData = addLength(
				len - previousLength, false, true);
		} else {
			newData = data;
			length = len;
		}
		return newData;
	}

	/* Public member functions. */
	
	void add(unsigned char[] str,
		unsigned int start, unsigned int len){
		if (len == 0) {return;}
		unsigned char[] previousData = data;
		unsigned int previousLength = length;
		unsigned char[] newData =
			addLength(len, true, false);
		std::arr::Uchar::copy(
			str, start, newData, previousLength, len);
		if (newData != previousData){
			delete[] previousData;
		}
		newData[previousLength + len] = 0;
	}

	void addChar(unsigned char c){
		unsigned char[] newData =
			addLength(1, true, true);
		unsigned int newLength = length;
		newData[newLength - 1] = c;
		newData[newLength] = 0;
	}

	void addCString(unsigned char[] cStr){
		add(cStr, 0,
			std::str::CString::length(cStr, 0));
	}
	
	void addDString(std::str::DString* string){
		add(string->data, 0, string->length);
	}
	
	/* Adds cStr to the string but
		all occurences of src is replaced with dst.
		Currently does not support if cStr is a substring of data. */
	void addReplace(unsigned char[] cStr,
		unsigned char[] src, unsigned char[] dst){
		addSubReplace(
			cStr, 0, std::str::CString::length(cStr, 0),
			src, 0, std::str::CString::length(src, 0),
			dst, 0, std::str::CString::length(dst, 0));
	}
	
	void addString(std::str::String* string){
		add(string->data, 0, string->length);
	}
	
	void addSubReplace(
		unsigned char[] str, unsigned int strStart,
		unsigned int strLen, unsigned char[] src,
		unsigned int srcStart, unsigned int srcLen,
		unsigned char[] dst, unsigned int dstStart,
		unsigned int dstLen){
		unsigned int addLen =
			std::arr::Uchar::replacedSize(
				str, strStart, strLen, src,
				srcStart, srcLen, dstLen);
		unsigned int len = length;
		unsigned char[] newData =
			addLength(addLen, true, true);
		std::arr::Uchar::setReplace(newData, len,
			str, strStart, strLen, src, srcStart,
			srcLen, dst, dstStart, dstLen);
		newData[len + addLen] = 0;
	}
	
	void addUint(unsigned int i,
		unsigned char base){
		unsigned int len = std::str::CString::uintLength(
			i, base);
		unsigned char[] newData =
			addLength(len, true, true);
		unsigned int newLength = length;
		std::str::CString::setUintEnd(
			i, newData, newLength - 1, base);
		newData[newLength] = 0;
	}
	
	void addView(std::str::View* string){
		add(string->data,
			string->start, string->length);
	}

	void clear(){
		length = 0;
		if (data != nullptr){
			data[0] = 0;
		}
	}

	unsigned char compare(unsigned char[] dst, 
		unsigned int i, unsigned int dstLen){
		return std::arr::Uchar::compareRange(data, 0,
			length, dst, i, dstLen);
	}
	
	unsigned char compareCString(unsigned char[] cStr){
		return std::str::CString::compareSubstring(
			data, 0, length, cStr, 0);
	}
	
	unsigned char compareDString(
		std::str::DString* string){
		return std::arr::Uchar::compareRange(data, 0,
			length, str->data, 0, str->length);
	}
	
	unsigned char compareString(
		std::str::String* str){
		return std::arr::Uchar::compareRange(data, 0,
			length, str->data, 0, str->length);
	}
	
	unsigned char compareView(std::str::View* str){
		return std::arr::Uchar::compareRange(data, 0,
			length, str->data, 0, str->length);
	}

	void copy(unsigned int start, unsigned char[] str,
		unsigned int i, unsigned int len){
		unsigned int dataLen = length;
		if (start + len > dataLen){
			if (start >= dataLen) {return;}
			len = dataLen - start;
		}
		std::arr::Uchar::copy(str, i, data, 
			start, len);
	}
	
	void erase(unsigned int start, unsigned int len){
		unsigned int newLength = length;
		if (start < newLength){
			unsigned char[] newData = data;
			if (start + len < newLength){
				newLength = newLength - len;
				std::arr::Uchar::copy(newData, start + len,
					newData, start, newLength - start);
			} else {
				newLength = start;
			}
			length = newLength;
			newData[newLength] = 0;
		}
	}

	unsigned int find(
		unsigned char c, unsigned int start){
		unsigned int len = length;
		if (start >= len) {return 0;}
		return std::arr::Uchar::find(
			c, data, start, len - start);
	}

	unsigned int findLast(
		unsigned char c, unsigned int start){
		unsigned int len = length;
		if (start > len) {start = len;}
		return std::arr::Uchar::findLast(
			c, data, 0, start);
	}

	unsigned int findLastRange(
		unsigned char[] str, unsigned int i,
		unsigned int len, unsigned int start){
		unsigned int max = length;
		if (start > max) {start = max;}
		return std::arr::Uchar::findLastRange(str, i, len,
			data, 0, start);
	}
	
	unsigned int findRange(
		unsigned char[] str, unsigned int i,
		unsigned int len, unsigned int start){
		unsigned int max = length;
		if (start >= max) {return 0;}
		return std::arr::Uchar::findRange(str, i, len,
			data, start, max - start);
	}

	void insert(unsigned int start,
		unsigned char[] src,
		unsigned int i, unsigned int len){
		unsigned char[] newData =
			insertLength(len, start);
		if (newData != nullptr){
			std::arr::Uchar::copy(src, i,
				newData, start, len);
		}
	}
	
	void insertChar(unsigned int start,
		unsigned char c, unsigned int len){
		unsigned char[] newData =
			insertLength(len, start);
		if (newData != nullptr){
			len = start + len;
			while (start < len){
				newData[start] = c;
				start = start + 1;
			}
		}
	}

	void move(std::str::DString* src){
		if (src == this) {return;}
		length = src->length;
		capacity = src->capacity;
		delete[] data;
		data = src->data;
		src->length = 0;
		src->capacity = 0;
		src->data = nullptr;
	}

	void reserve(unsigned int newCapacity){
		if (newCapacity > capacity){
			unsigned char[] previousData = data;
			unsigned char[] newData = 
				new unsigned char[newCapacity];
			if (previousData != nullptr){
				std::arr::Uchar::copy(previousData, 0,
					newData, 0, length + 1);
				delete[] previousData;
			}
			data = newData;
		}
		capacity = newCapacity;
	}
	
	void reverse(){
		std::arr::Uchar::reverse(
			data, 0, length);
	}

	/* Should work even if the regions overlap, as then 
		its length can not be greater than its container. */
	void set(unsigned char[] str,
		unsigned int start, unsigned int len){
		unsigned char[] newData =
			setLength(len);
		if (newData != nullptr){
			std::arr::Uchar::copy(str, start, data, 0, len);
			newData[len] = 0;
		}
	}

	void setCString(unsigned char[] cStr){
		set(cStr, 0,
			std::str::CString::length(cStr, 0));
	}

	void setDString(std::str::DString* string){
		set(string->data, 0, string->length);
	}

	void setString(std::str::String* string){
		set(string->data, 0, string->length);
	}
	
	void setView(std::str::View* string){
		set(string->data,
			string->start, string->length);
	}

	void shift(
		unsigned int start, unsigned int len){
		insertLength(len, start);
	}
	
	void trim(unsigned int len){
		if (len < length){
			length = len;
			data[len] = 0;
		}
	}

}