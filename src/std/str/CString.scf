/*
Copyright (c) 2021-2022 SWARMBJECT contributors

Redistribution and use in source and binary forms,
with or without modification, are permitted
provided that the following conditions are met:

1. Redistributions of source code must
retain the above copyright notice, this list
of conditions and the following disclaimer.

2. Redistributions in binary form must
reproduce the above copyright notice,
this list of conditions and the following
disclaimer in the documentation and/or other
materials provided with the distribution.

Subject to the terms and conditions of this
license, each copyright holder and contributor
hereby grants to those receiving rights under this
license a perpetual, worldwide, non-exclusive,
no-charge, royalty-free, irrevocable (except for
failure to satisfy the conditions of this license)
patent license to make, have made, use, offer to
sell, sell, import, and otherwise transfer this
software, where such license applies only to
those patent claims, already acquired or hereafter
acquired, licensable by such copyright holder or
contributor that are necessarily infringed by:

(a) their Contribution(s) (the licensed
copyrights of copyright holders and
non-copyrightable additions of contributors,
in source or binary form) alone; or

(b) combination of their Contribution(s)
with the work of authorship to which such
Contribution(s) was added by such copyright
holder or contributor, if, at the time the
Contribution is added, such addition causes
such combination to be necessarily infringed.
The patent license shall not apply to any other
combinations which include the Contribution.

Except as expressly stated above, no rights or
licenses from any copyright holder or contributor
is granted under this license, whether expressly,
by implication, estoppel or otherwise.

DISCLAIMER

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
*/
class CString {

	static unsigned int getChar2(
		unsigned char chr, unsigned char chr2){
					 /*11111111111*/
		return ((chr 
			& 0b00011111 
				) <<6) | (chr2 
						& 0b00111111);
	}
	
	static unsigned int getChar3(
		unsigned char chr, unsigned char chr2, 
		unsigned char chr3){
					 /*1111111111111111*/
		return ((chr 
		 & 0b00001111 
		 ) <<12) | ((chr2 
					 & 0b00111111 
						 ) <<6) | (chr3 
								 & 0b00111111);
	}
	
	static unsigned int getChar4(
		unsigned char chr, unsigned char chr2, 
		unsigned char chr3, unsigned char chr4){
					 /*111111111111111111111*/
		return ((chr 
		& 0b00000111 
		) <<18) | ((chr2 
					& 0b00111111 
					) <<12) | ((chr3 
								& 0b00111111 
									) <<6) | (chr4 
											& 0b00111111);
	}
						
	static void setChar2(
		unsigned char[] dst, unsigned int start, 
		unsigned short c){
									 /*11111111111*/
		dst[start    ] = c >>6 
							| 0b11000000;
		dst[start + 1] =			c 
										& 0b00111111 
										| 0b10000000;
	}
	
	static void setChar3(
		unsigned char[] dst, unsigned int start, 
		unsigned short c){
									 /*1111111111111111*/
		dst[start    ] = c 
										 >>12 
						 | 0b11100000; 
		dst[start + 1] =		 c >> 6 
									 & 0b00111111 
									 | 0b10000000; 
		dst[start + 2] =					 c 
												 & 0b00111111 
												 | 0b10000000;
	}
	
	static void setChar4(
		unsigned char[] dst, unsigned int start, 
		unsigned int c){
									 /*111111111111111111111*/
		dst[start    ] = c>> 
											18 
						| 0b11110000; 
		dst[start + 1] =		c >>12 
									& 0b00111111 
									| 0b10000000; 
		dst[start + 2] =					c >> 6 
												& 0b00111111 
												| 0b10000000; 
		dst[start + 3] =								c 
															& 0b00111111 
															| 0b10000000;
	}
	
	static void setChars2(
		unsigned char[] dst, unsigned int start, 
		unsigned short c, unsigned int len){
		if (len > 0){
			setChar2(dst, start, c);
			len = start + 2 * len - 2;
			while (len > start){
				dst[len] = dst[start];
				dst[len + 1] = dst[start + 1];
				len = len - 2;
			}
		}
	}
	
	static void setChars3(
		unsigned char[] dst, unsigned int start, 
		unsigned short c, unsigned int len){
		if (len > 0){
			setChar3(dst, start, c);
			len = start + 3 * len - 3;
			while (len > start){
				dst[len] = dst[start];
				dst[len + 1] = dst[start + 1];
				dst[len + 2] = dst[start + 2];
				len = len - 3;
			}
		}
	}
	
	static void setChars4(
		unsigned char[] dst, unsigned int start, 
		unsigned short c, unsigned int len){
		if (len > 0){
			setChar4(dst, start, c);
			len = start + 4 * len - 4;
			while (len > start){
				dst[len] = dst[start];
				dst[len + 1] = dst[start + 1];
				dst[len + 2] = dst[start + 2];
				dst[len + 3] = dst[start + 3];
				len = len - 4;
			}
		}
	}

	/* Public member functions. */

	static unsigned char charLength(unsigned int c){
		if (c < 128) {return 1;}
		if (c < 2048) {return 2;}
		if (c < 65536) {return 3;}
		/* c < 2097152 */
		return 4;
	}

	/* Compares a CString to a CString. */
	static unsigned char compare(
		unsigned char[] src, unsigned int i,
		unsigned char[] dst, unsigned int j,
		std::str::Compare* cmp){
		if (src == nullptr){
			src = "";
			i = 0;
		}
		if (dst == nullptr){
			dst = "";
			j = 0;
		}
		if (cmp == nullptr){
			while (true){
				unsigned char srcChar = src[i];
				unsigned char dstChar = dst[j];
				if (srcChar != dstChar){
					if (srcChar > dstChar) 
						{return std::Compare::greater;}
					return std::Compare::less;
				}
				if (srcChar == 0) 
					{return std::Compare::equal;}
				i = i + 1;
				j = j + 1;
			}
		} else {
			cmp->set(src, i, 0x7FFFFFFF, 
				dst, j, 0x7FFFFFFF, true);
			cmp->srcStart = i;
			cmp->dstStart = j;
			while (true){
				switch (cmp->compare(cmp)){
					case std::Compare::less:
						return std::Compare::less;
					case std::Compare::equal:
						if (src[cmp->srcStart] == 0) 
							{return std::Compare::equal;}
						break;
					case std::Compare::greater:
						return std::Compare::greater;
					case std::Compare::unset:
						break;
				}
				cmp->srcStart = cmp->srcEnd;
				cmp->dstStart = cmp->dstEnd;
			}
		}
	}
	
	static unsigned char compareRange(
		unsigned char[] src, unsigned int i,
		unsigned char[] dst, unsigned int j,
		unsigned int len, std::str::Compare* cmp){
		return std::Compare::greater - 
			subcompare(dst, j, 
				len, src, i, cmp);
	}
	
	static unsigned int find(
		unsigned char[] dst, unsigned int start, 
		unsigned char[] src, unsigned int i,
		std::str::Compare* cmp){
		/*To skip an if in the loop.*/
		if (src[i] == 0) {return start + 1;}
		if (cmp == nullptr){
			while (true){
				unsigned char dstChar = dst[start];
				unsigned char srcChar = src[i];
				unsigned int j = 0;
				while (dstChar == srcChar){
					j = j + 1;
					srcChar = src[i + j];
					if (srcChar == 0) {return start + 1;}
					dstChar = dst[start + j];
				}
				if (dstChar == 0) {return 0;}
				start = start + 1;
			}
		} else {
			unsigned int dstNext;
			cmp->set(dst, start, 0x7FFFFFFF,
				src, i, 0x7FFFFFFF, true);
			while (dst[start] != 0){
				cmp->srcStart = start;
				cmp->dstStart = i;
				unsigned char cmpChar = 
					cmp->compare(cmp);
				dstNext = cmp->srcEnd;
				while (cmpChar == std::Compare::equal){
					if (src[cmp->dstEnd] == 0) 
						{return start + 1;}
					cmp->srcStart = cmp->srcEnd;
					cmp->dstStart = cmp->dstEnd;
					cmpChar = cmp->compare(cmp);
				}
				start = dstNext;
			}
			return 0;
		}
	}
	
	static unsigned int findChar(
		unsigned char[] dst, unsigned int start, 
		unsigned int c, std::str::Compare* cmp){
		if (cmp == nullptr){
			unsigned int j = start;
			unsigned int end;
			while (dst[j] != 0){
				if (getChar(dst, &j, &end, start, 
					0x7FFFFFFF) == c) {return j + 1;}
				j = end;
			}
			return 0;
		} else {
			cmp->setChar(dst, start, 0x7FFFFFFF, c, true);
			cmp->srcStart = start;
			while (dst[cmp->srcStart] != 0){
				if (cmp->compare(cmp) == 
					std::Compare::equal) 
						{return cmp->srcStart + 1;}
				cmp->srcStart = cmp->srcEnd;
			}
			return 0;
		}
	}
	
	static unsigned int findRange(
		unsigned char[] dst, unsigned int start, 
		unsigned char[] src, unsigned int i, 
		unsigned int len, std::str::Compare* cmp){
		/*To skip an if in the loop.*/
		if (len == 0) {return start + 1;}
		if (cmp == nullptr){
			while (true){
				unsigned int j = 0;
				while (true){
					unsigned char dstChar = dst[start + j];
					if (dstChar == 0) {return 0;}
					if (dstChar != src[i + j]) {break;}
					j = j + 1;
					if (j == len) {return start + 1;}
				}
				start = start + 1;
			}
		} else {
			len = i + len;
			cmp->set(dst, start, 0x7FFFFFFF,
				src, i, len, true);
			unsigned int dstNext;
			while (dst[start] != 0){
				cmp->srcStart = start;
				cmp->dstStart = i;
				unsigned char cmpChar = 
					cmp->compare(cmp);
				dstNext = cmp->srcEnd;
				while (cmpChar == std::Compare::equal){
					if (cmp->dstEnd >= len) {return start + 1;}
					if (dst[cmp->srcEnd] == 0) {break;}
					cmp->srcStart = cmp->srcEnd;
					cmp->dstStart = cmp->dstEnd;
					cmpChar = cmp->compare(cmp);
				}
				start = dstNext;
			}
			return 0;
		}
	}

	static unsigned int getChar(unsigned char[] src, 
		unsigned int* start, unsigned int* end,
		unsigned int min, unsigned int max){
		unsigned int i = *start;
		unsigned char character = src[i];
		switch (character >> 3){
			case 0x10: case 0x11:
			case 0x12: case 0x13:
			case 0x14: case 0x15:
			case 0x16: case 0x17:
				if (i > min){
					switch (src[i - 1] >> 3){
						case 0x10: case 0x11:
						case 0x12: case 0x13:
						case 0x14: case 0x15:
						case 0x16: case 0x17:
							if (i - 1 > min){
								switch (src[i - 2] >> 3){
									case 0x10: case 0x11:
									case 0x12: case 0x13:
									case 0x14: case 0x15:
									case 0x16: case 0x17:
										if (i - 2 > min && 
											src[i - 3] >> 3 == 0x1E){
											*start = i - 3;
											*end = i + 1;
											return getChar4(
												src[i - 3], src[i - 2],
												src[i - 1], character);
										}
										break;
									case 0x1C: case 0x1D:
										*start = i - 2;
										*end = i + 1;
										return getChar3(src[i - 2], 
											src[i - 1], character);
										break;
									case 0x1E:
										if (i + 1 < max &&
											src[i + 1] >> 6 == 2){
											*start = i - 2;
											*end = i + 2;
											return getChar4(
												src[i - 2], src[i - 1],
												character, src[i + 1]);
										}
								}
							}
							break;
						case 0x18: case 0x19:
						case 0x1A: case 0x1B:
							*start = i - 1;
							*end = i + 1;
							return getChar2(src[i - 1], character);
						case 0x1C: case 0x1D:
							if (i + 1 < max && src[i + 1] >> 6 == 2){
								*start = i - 1;
								*end = i + 2;
								return getChar3(src[i - 1], 
									character, src[i + 1]);
							}
							break;
						case 0x1E:
							if (i + 2 < max && src[i + 1] >> 6 == 2 && 
								src[i + 2] >> 6 == 2){
								*start = i - 1;
								*end = i + 3;
								return getChar4(src[i - 1], character,
									src[i + 1], src[i + 2]);
							}
					}
				}
				break;
			case 0x18: case 0x19:
			case 0x1A: case 0x1B:
				if (i + 1 < max && src[i + 1] >> 6 == 2){
					*end = i + 2;
					return getChar2(character, src[i + 1]);
				}
				break;
			case 0x1C: case 0x1D:
				if (i + 2 < max && src[i + 1] >> 6 == 2 &&
					src[i + 2] >> 6 == 2){
					*end = i + 3;
					return getChar3(character,
						src[i + 1], src[i + 2]);
				}
				break;
			case 0x1E:
				if (i + 3 < max && src[i + 1] >> 6 == 2 &&
					src[i + 2] >> 6 == 2 && src[i + 3] >> 6 == 2){
					*end = i + 4;
					return getChar4(character, src[i + 1],
						src[i + 2], src[i + 3]);
				}
				break;
			default:
				*end = i + 1;
				return character;
		}
		*end = i + 1;
		return 0xFFFD;
	}
	
	static unsigned int getValidChar(
		unsigned char[] src, 
		unsigned int* start, unsigned int* end){
		unsigned int i = *start;
		while (true){
			unsigned char character = src[i];
			switch (character >> 4){
				case 0x8: case 0x9:
				case 0xA: case 0xB:
					i = i - 1;
					break;
				case 0xC: case 0xD:
					*start = i;
					*end = i + 2;
					return getChar2(character, src[i + 1]);
				case 0xE:
					*start = i;
					*end = i + 3;
					return getChar3(character, 
						src[i + 1], src[i + 2]);
				case 0xF:
					*start = i;
					*end = i + 4;
					return getChar4(character, src[i + 1],
						src[i + 2], src[i + 3]);
				default:
					*start = i;
					*end = i + 1;
					return character;
			}
		}
	}

	/* len is the maximum characters to read, however it also
		returns at the first non digit character. */
	static unsigned int getUint(
		unsigned char[] src, unsigned int start,
		unsigned int len, unsigned int* chars,
		unsigned char base){
		unsigned int i = start;
		unsigned char character;
		unsigned int value = 0;
		unsigned char multiplier =
			numberBaseToUint(base);
		len = len + i;
		while (i < len){
			character = src[i];
			i = i + 1;
			switch (character){
				case '0': case '1':
					value = value * multiplier + character - '0';
					continue;
				case '2': case '3': case '4': case '5':
				case '6': case '7':
					if (base >= std::NumberBases::octal){
						value = value * multiplier + character - '0';
						continue;
					}
					break;
				case '8': case '9':
					if (base >= std::NumberBases::decimal){
						value = value * multiplier + character - '0';
						continue;
					}
					break;
				case 'A': case 'B': case 'C': case 'D':
				case 'E': case 'F':
					if (base >= std::NumberBases::hexadecimal){
						value = value * multiplier + 10 + character - 'A';
						continue;
					}
					break;
				case 'a': case 'b': case 'c': case 'd':
				case 'e': case 'f':
					if (base >= std::NumberBases::hexadecimal){
						value = value * multiplier + 10 + character - 'a';
						continue;
					}
					break;
			}
			i = i - 1;
			break;
		}
		if (chars != nullptr){
			*chars = i - start;
		}
		return value;
	}

	/* The length of the string excluding the ending 0. */
	static unsigned int length(unsigned char[] str,
		unsigned int start){
		if (str == nullptr) {return 0;}
		unsigned int len = start;
		while (str[len] != 0){
			len = len + 1;
		}
		return len - start;
	}
	
	static unsigned int numberBaseToUint(
		unsigned char base){
		unsigned int i;
		switch (base){
			case std::NumberBases::binary:
				i = 2;
				break;
			case std::NumberBases::octal:
				i = 8;
				break;
			case std::NumberBases::decimal:
				i = 10;
				break;
			case std::NumberBases::hexadecimal:
				i = 16;
				break;
		}
		return i;
	}
	
	static unsigned char setChar(
		unsigned char[] dst, unsigned int start, 
		unsigned int c){
		if (c < 128){
			dst[start] = c;
			return 1;
		}
		if (c < 2048){
			setChar2(dst, start, c);
			return 2;
		}
		if (c < 65536){
			setChar3(dst, start, c);
			return 3;
		}
		/* c < 2097152 */
		setChar4(dst, start, c);
		return 4;
	}
	
	/* Without ending 0, returns length. */
	static unsigned int setUint(
		unsigned char[] dst, unsigned int start, 
		unsigned int i, unsigned char base){
		return setUintEnd(
			dst, start + uintLength(i, base) - 1, i, base);
	}

	/* Without ending 0, returns length. */
	static unsigned int setUintEnd(
		unsigned char[] dst, unsigned int end, 
		unsigned int i, unsigned char base){
		unsigned char divider =
			numberBaseToUint(base);
		unsigned int start = end;
		unsigned char digit;
		while (true){
			digit = i % divider;
			i = (i - digit) / divider;
			if (digit < 10){
				digit = digit + '0';
			} else {
				digit = digit - 10 + 'A';
			}
			dst[end] = digit;
			end = end - 1;
			if (i == 0) {break;}
		}
		return start - end;
	}

	static unsigned char starts(
		unsigned char[] src, unsigned int i,
		unsigned char[] dst, unsigned int j,
		std::str::Compare* cmp){
		if (src == nullptr){
			src = "";
			i = 0;
		}
		if (dst == nullptr){
			dst = "";
			j = 0;
		}
		if (cmp == nullptr){
			unsigned char dstChar = dst[j];
			while (dstChar != 0){
				unsigned char srcChar = src[i];
				if (srcChar != dstChar){
					if (srcChar > dstChar) 
						{return std::Compare::greater;}
					return std::Compare::less;
				}
				i = i + 1;
				j = j + 1;
				dstChar = dst[j];
			}
		} else {
			cmp->set(src, i, 0x7FFFFFFF, 
				dst, j, 0x7FFFFFFF, true);
			cmp->srcStart = i;
			cmp->dstStart = j;
			while (dst[cmp->dstStart] != 0){
				switch (cmp->compare(cmp)){
					case std::Compare::less:
						return std::Compare::less;
					case std::Compare::equal:
						break;
					case std::Compare::greater:
						return std::Compare::greater;
					case std::Compare::unset:
						break;
				}
				cmp->srcStart = cmp->srcEnd;
				cmp->dstStart = cmp->dstEnd;
			}
		}
		return std::Compare::equal;
	}

	static unsigned char startsRange(
		unsigned char[] src, unsigned int i,
		unsigned char[] dst, unsigned int j,
		unsigned int len, std::str::Compare* cmp){
		if (src == nullptr){
			src = "";
			i = 0;
		}
		len = len + j;
		if (cmp == nullptr){
			while (j < len){
				unsigned char srcChar = src[i];
				unsigned char dstChar = dst[j];
				if (srcChar != dstChar){
					if (srcChar > dstChar) 
						{return std::Compare::greater;}
					return std::Compare::less;
				}
				if (srcChar == 0) 
					{return std::Compare::less;}
				i = i + 1;
				j = j + 1;
			}
		} else {
			cmp->set(src, i, len,
				dst, j, 0x7FFFFFFF, true);
			cmp->srcStart = i;
			cmp->dstStart = j;
			while (cmp->dstStart < len){
				switch (cmp->compare(cmp)){
					case std::Compare::less:
						return std::Compare::less;
					case std::Compare::equal:
						if (src[cmp->srcStart] == 0) 
							{return std::Compare::less;}
						break;
					case std::Compare::greater:
						return std::Compare::greater;
					case std::Compare::unset:
						break;
				}
				cmp->srcStart = cmp->srcEnd;
				cmp->dstStart = cmp->dstEnd;
			}
		}
		return std::Compare::equal;
	}

	/* Compares a substring, to a CString.
		src is the substring, dst is a CString. */
	static unsigned char subcompare(
		unsigned char[] src, unsigned int i, 
		unsigned int len, unsigned char[] dst, 
		unsigned int j, std::str::Compare* cmp){
		if (dst == nullptr){
			dst = "";
			j = 0;
		}
		len = len + i;
		if (cmp == nullptr){
			while (i < len){
				unsigned char srcChar = src[i];
				unsigned char dstChar = dst[j];
				if (srcChar != dstChar){
					if (srcChar > dstChar) 
						{return std::Compare::greater;}
					return std::Compare::less;
				}
				if (dstChar == 0) 
					{return std::Compare::greater;}
				i = i + 1;
				j = j + 1;
			}
		} else {
			cmp->set(src, i, len,
				dst, j, 0x7FFFFFFF, true);
			cmp->srcStart = i;
			cmp->dstStart = j;
			while (cmp->srcStart < len){
				switch (cmp->compare(cmp)){
					case std::Compare::less:
						return std::Compare::less;
					case std::Compare::equal:
						if (dst[cmp->dstStart] == 0) 
							{return std::Compare::greater;}
						break;
					case std::Compare::greater:
						return std::Compare::greater;
					case std::Compare::unset:
						break;
				}
				cmp->srcStart = cmp->srcEnd;
				cmp->dstStart = cmp->dstEnd;
			}
			j = cmp->dstStart;
		}
		if (dst[j] == 0) {return std::Compare::equal;}
		else {return std::Compare::less;}
	}

	static unsigned char subcompareRange(
		unsigned char[] src, unsigned int i,
		unsigned int srcLen, unsigned char[] dst,
		unsigned int j, unsigned int dstLen,
		std::str::Compare* cmp){
		if (cmp == nullptr){
			return std::arr::Uchar::compareRange(
				src, i, srcLen, dst, j, dstLen);
		}
		srcLen = i + srcLen;
		dstLen = j + dstLen;
		cmp->set(src, i, srcLen,
			dst, j, dstLen, true);
		cmp->srcStart = i;
		cmp->dstStart = j;
		while (cmp->srcStart < srcLen && 
			cmp->dstStart < dstLen){
			switch (cmp->compare(cmp)){
				case std::Compare::less:
					return std::Compare::less;
				case std::Compare::equal:
					break;
				case std::Compare::greater:
					return std::Compare::greater;
				case std::Compare::unset:
					break;
			}
			cmp->srcStart = cmp->srcEnd;
			cmp->dstStart = cmp->dstEnd;
		}
		if (cmp->srcStart == srcLen){
			if (cmp->dstStart == dstLen) 
				{return std::Compare::equal;}
			return std::Compare::less;
		}
		return std::Compare::greater;
	}
	
	static unsigned char subendsRange(
		unsigned char[] dst, unsigned int end, 
		unsigned int max, unsigned char[] src, 
		unsigned int i, unsigned int len, 
		std::str::Compare* cmp){
		if (cmp == nullptr){
			return std::arr::Uchar::ends(
				dst, end, max, src, i, len);
		} else {
			max = max + end;
			len = i + len;
			cmp->set(dst, end, max, 
				src, i, len, false);
			cmp->srcStart = max;
			cmp->dstStart = len;
			while (cmp->dstStart > i){
				if (cmp->srcStart <= end) 
					{return std::Compare::less;}
				cmp->srcStart = cmp->srcStart - 1;
				cmp->dstStart = cmp->dstStart - 1;
				switch (cmp->compare(cmp)){
					case std::Compare::less:
						return std::Compare::less;
					case std::Compare::equal:
						break;
					case std::Compare::greater:
						return std::Compare::greater;
					case std::Compare::unset:
						break;
				}
			}
			return std::Compare::equal;
		}
	}
	
	static unsigned int subfind(
		unsigned char[] dst, unsigned int start, 
		unsigned int max, unsigned char[] src, 
		unsigned int i, std::str::Compare* cmp){
		/*To skip an if in the loop.*/
		if (src[i] == 0) {return start + 1;}
		max = start + max;
		if (cmp == nullptr){
			unsigned int j;
			while (true){
				j = 0;
				unsigned char srcChar = src[i];
				while (true){
					if (start + j == max) {return 0;}
					unsigned char dstChar = dst[start + j];
					if (dstChar != srcChar) {break;}
					j = j + 1;
					srcChar = src[i + j];
					if (srcChar == 0) {return start + 1;}
				}
				start = start + 1;
			}
		} else {
			cmp->set(dst, start, max, 
				src, i, 0x7FFFFFFF, true);
			unsigned int dstNext;
			while (start < max){
				cmp->srcStart = start;
				cmp->dstStart = i;
				unsigned char cmpChar = 
					cmp->compare(cmp);
				dstNext = cmp->srcEnd;
				while (cmpChar == std::Compare::equal){
					if (src[cmp->dstEnd] == 0) 
						{return start + 1;}
					if (cmp->srcEnd >= max) {break;}
					cmp->srcStart = cmp->srcEnd;
					cmp->dstStart = cmp->dstEnd;
					cmpChar = cmp->compare(cmp);
				}
				start = dstNext;
			}
			return 0;
		}
	}
	
	static unsigned int subfindChar(
		unsigned char[] dst, unsigned int start, 
		unsigned int max, unsigned int c, 
		std::str::Compare* cmp){
		max = start + max;
		if (cmp == nullptr){
			unsigned int j = start;
			unsigned int end;
			while (j < max){
				if (getChar(dst, &j, &end, start, 
					max) == c) {return j + 1;}
				j = end;
			}
			return 0;
		} else {
			cmp->setChar(dst, start, max, c, true);
			cmp->srcStart = start;
			while (cmp->srcStart < max){
				if (cmp->compare(cmp) == 
					std::Compare::equal) 
						{return cmp->srcStart + 1;}
				cmp->srcStart = cmp->srcEnd;
			}
			return 0;
		}
	}
	
	static unsigned int subfindLast(
		unsigned char[] dst, unsigned int end, 
		unsigned int max, unsigned char[] src, 
		unsigned int i, std::str::Compare* cmp){
		if (cmp == nullptr){
			return std::arr::Uchar::findLastRange(
				dst, end, max, src, i, 
				std::str::CString::length(src, i));
		} else {
			max = max + end;
			/*To skip an if in the loop.*/
			if (src[i] == 0) {return max;}
			cmp->set(dst, end, max, 
				src, i, 0x7FFFFFFF, true);
			unsigned int start = max;
			while (start > end){
				cmp->srcStart = start - 1;
				cmp->dstStart = i;
				unsigned char cmpChar = 
					cmp->compare(cmp);
				start = cmp->srcStart;
				while (cmpChar == std::Compare::equal){
					if (src[cmp->dstEnd] == 0) 
						{return start + 1;}
					if (cmp->srcEnd >= max) {break;}
					cmp->srcStart = cmp->srcEnd;
					cmp->dstStart = cmp->dstEnd;
					cmpChar = cmp->compare(cmp);
				}
			}
			return 0;
		}
	}
	
	static unsigned int subfindLastChar(
		unsigned char[] dst, unsigned int end, 
		unsigned int max, unsigned char c, 
		std::str::Compare* cmp){
		max = max + end;
		if (cmp == nullptr){
			unsigned int start = max;
			unsigned int j;
			while (start > end){
				start = start - 1;
				if (getChar(dst, &start, &j, end, 
					max) == c) {return start + 1;}
			}
			return 0;
		} else {
			cmp->setChar(dst, end, max, c, false);
			cmp->srcStart = max;
			while (cmp->srcStart > end){
				cmp->srcStart = cmp->srcStart - 1;
				if (cmp->compare(cmp) == 
					std::Compare::equal) 
						{return cmp->srcStart + 1;}
			}
			return 0;
		}
	}
	
	static unsigned int subfindLastRange(
		unsigned char[] dst, unsigned int end, 
		unsigned int max, unsigned char[] src, 
		unsigned int i, unsigned int len, 
		std::str::Compare* cmp){
		if (cmp == nullptr){
			return std::arr::Uchar::findLastRange(
				dst, end, max, src, i, len);
		} else {
			max = max + end;
			/*To skip an if in the loop.*/
			if (len == 0) {return max;}
			len = i + len - 1;
			cmp->set(dst, end, max, 
				src, i, len + 1, false);
			while (max > end){
				cmp->srcStart = max - 1;
				cmp->dstStart = len;
				unsigned char cmpChar = 
					cmp->compare(cmp);
				max = cmp->srcStart;
				while (cmpChar == std::Compare::equal){
					if (cmp->dstStart <= i)
						{return cmp->srcStart + 1;}
					if (cmp->srcStart <= end) {break;}
					cmp->srcStart = cmp->srcStart - 1;
					cmp->dstStart = cmp->dstStart - 1;
					cmpChar = cmp->compare(cmp);
				}
			}
			return 0;
		}
	}
	
	static unsigned int subfindRange(
		unsigned char[] dst, unsigned int start, 
		unsigned int max, unsigned char[] src, 
		unsigned int i, unsigned int len, 
		std::str::Compare* cmp){
		if (cmp == nullptr){
			return std::arr::Uchar::findRange(
				dst, start, max, src, i, len);
		} else {
			/*To skip an if in the loop.*/
			if (len == 0) {return start + 1;}
			max = start + max;
			len = i + len;
			cmp->set(dst, start, max, 
				src, i, len, true);
			unsigned int dstNext;
			while (start < max){
				cmp->srcStart = start;
				cmp->dstStart = i;
				unsigned char cmpChar = 
					cmp->compare(cmp);
				dstNext = cmp->srcEnd;
				while (cmpChar == std::Compare::equal){
					if (cmp->dstEnd >= len)
						{return start + 1;}
					if (cmp->srcEnd >= max) {break;}
					cmp->srcStart = cmp->srcEnd;
					cmp->dstStart = cmp->dstEnd;
					cmpChar = cmp->compare(cmp);
				}
				start = dstNext;
			}
			return 0;
		}
	}
	
	static unsigned char substarts(
		unsigned char[] src, unsigned int i, 
		unsigned int len, unsigned char[] dst, 
		unsigned int j, std::str::Compare* cmp){
		if (dst == nullptr){
			dst = "";
			j = 0;
		}
		len = len + i;
		if (cmp == nullptr){
			unsigned char dstChar = dst[j];
			while (dstChar != 0){
				if (i >= len) {return std::Compare::less;}
				unsigned char srcChar = src[i];
				if (srcChar != dstChar){
					if (srcChar > dstChar) 
						{return std::Compare::greater;}
					return std::Compare::less;
				}
				i = i + 1;
				j = j + 1;
				dstChar = dst[j];
			}
		} else {
			cmp->set(src, i, len,
				dst, j, 0x7FFFFFFF, true);
			cmp->srcStart = i;
			cmp->dstStart = j;
			while (dst[cmp->dstStart] != 0){
				if (cmp->srcStart >= len)
					{return std::Compare::less;}
				switch (cmp->compare(cmp)){
					case std::Compare::less:
						return std::Compare::less;
					case std::Compare::equal:
						break;
					case std::Compare::greater:
						return std::Compare::greater;
					case std::Compare::unset:
						break;
				}
				cmp->srcStart = cmp->srcEnd;
				cmp->dstStart = cmp->dstEnd;
			}
		}
		return std::Compare::equal;
	}
	
	static unsigned char substartsRange(
		unsigned char[] src, unsigned int i,
		unsigned int srcLen, unsigned char[] dst,
		unsigned int j, unsigned int dstLen,
		std::str::Compare* cmp){
		if (cmp == nullptr){
			return std::arr::Uchar::starts(
				src, i, srcLen, dst, j, dstLen);
		}
		srcLen = i + srcLen;
		dstLen = j + dstLen;
		cmp->set(src, i, srcLen,
			dst, j, dstLen, true);
		cmp->srcStart = i;
		cmp->dstStart = j;
		while (cmp->dstStart < dstLen){
			if (cmp->srcStart >= srcLen)
				{return std::Compare::less;}
			switch (cmp->compare(cmp)){
				case std::Compare::less:
					return std::Compare::less;
				case std::Compare::equal:
					break;
				case std::Compare::greater:
					return std::Compare::greater;
				case std::Compare::unset:
					break;
			}
			cmp->srcStart = cmp->srcEnd;
			cmp->dstStart = cmp->dstEnd;
		}
		return std::Compare::equal;
	}

	/* Without ending 0. */
	static unsigned int uintLength(
		unsigned int i, unsigned char base){
		unsigned int j = 1;
		unsigned char divider =
			numberBaseToUint(base);
		while (true){
			i = (i - (i % divider)) / divider;
			if (i == 0) {break;}
			j = j + 1;
		}
		return j;
	}

}