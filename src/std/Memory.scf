/*
Copyright (c) 2021 SWARMBJECT contributors

Redistribution and use in source and binary forms,
with or without modification, are permitted
provided that the following conditions are met:

1. Redistributions of source code must
retain the above copyright notice, this list
of conditions and the following disclaimer.

2. Redistributions in binary form must
reproduce the above copyright notice,
this list of conditions and the following
disclaimer in the documentation and/or other
materials provided with the distribution.

Subject to the terms and conditions of this
license, each copyright holder and contributor
hereby grants to those receiving rights under this
license a perpetual, worldwide, non-exclusive,
no-charge, royalty-free, irrevocable (except for
failure to satisfy the conditions of this license)
patent license to make, have made, use, offer to
sell, sell, import, and otherwise transfer this
software, where such license applies only to
those patent claims, already acquired or hereafter
acquired, licensable by such copyright holder or
contributor that are necessarily infringed by:

(a) their Contribution(s) (the licensed
copyrights of copyright holders and
non-copyrightable additions of contributors,
in source or binary form) alone; or

(b) combination of their Contribution(s)
with the work of authorship to which such
Contribution(s) was added by such copyright
holder or contributor, if, at the time the
Contribution is added, such addition causes
such combination to be necessarily infringed.
The patent license shall not apply to any other
combinations which include the Contribution.

Except as expressly stated above, no rights or
licenses from any copyright holder or contributor
is granted under this license, whether expressly,
by implication, estoppel or otherwise.

DISCLAIMER

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
*/
class Memory {

	/* Works even if overlapping. */
	static void copy(unsigned char[] src, unsigned int i,
		unsigned char[] dst, unsigned int j, unsigned int len){
		if (i > j){
			len = i + len;
			while (i < len){
				dst[j] = src[i];
				i = i + 1;
				j = j + 1;
			}
		} else {
			while (len > 0){
				len = len - 1;
				dst[j + len] = src[i + len];
			}
		}
	}
	
	/* Works even if overlapping. */
	static void copyPtrs(void*[] src, unsigned int i,
		void*[] dst, unsigned int j, unsigned int len){
		if (i > j){
			len = i + len;
			while (i < len){
				dst[j] = src[i];
				i = i + 1;
				j = j + 1;
			}
		} else {
			while (len > 0){
				len = len - 1;
				dst[j + len] = src[i + len];
			}
		}
	}

	/* 0 if equals, + if src > dst, - otherwise. */
	static char compare(unsigned char[] src, unsigned int i,
		unsigned char[] dst, unsigned int j, unsigned int len){
		len = i + len;
		while (i < len){
			unsigned char srcChar = src[i];
			unsigned char dstChar = dst[j];
			if (srcChar != dstChar){
				if (srcChar > dstChar) {return 1;}
				return -1;
			}
			i = i + 1;
			j = j + 1;
		}
		return 0;
	}
	
	static char compareRange(
		unsigned char[] src, unsigned int i,
		unsigned int srcLen, unsigned char[] dst,
		unsigned int j, unsigned int dstLen){
		unsigned int len;
		if (srcLen > dstLen){
			len = dstLen;
		} else {
			len = srcLen;
		}
		int cmp = compare(src, i, dst, j, len);
		if (cmp == 0 && dstLen != srcLen){
			if (srcLen > dstLen) {return 1;}
			return -1;
		}
		return cmp;
	}

	static char compareUchar(unsigned char src,
		unsigned char dst){
		if (src > dst) {return 1;}
		else if (src == dst) {return 0;}
		return -1;
	}

	static char compareInt(int src, float dst){
		if (src > dst) {return 1;}
		else if (src == dst) {return 0;}
		return -1;
	}

	static char compareFloat(float src, float dst){
		if (src > dst) {return 1;}
		else if (src == dst) {return 0;}
		return -1;
	}
	
	static void switchUchar(unsigned char* src,
		unsigned char* dst){
		unsigned char tmp = *src;
		*src = *dst;
		*dst = tmp;
	}
	
	/* Finds the uchar in the string from and including
		the starting position and returns its
		absolute position + 1 or 0 if not found. */
	static unsigned int indexOfUchar(
		unsigned char c, unsigned char[] str,
		unsigned int start, unsigned int max){
		max = max + start;
		while (start < max){
			if (str[start] == c) {return start + 1;}
			start = start + 1;
		}
		return 0;
	}

	/* Finds the uchar in the string from and including
		the end + max - 1 position and returns its
		absolute position + 1 or 0 if not found. */
	static unsigned int indexOfUcharReverse(
		unsigned char c, unsigned char[] str,
		unsigned int end, unsigned int max){
		max = max + end;
		while (max > end){
			max = max - 1;
			if (str[max] == c) {return max + 1;}
		}
		return 0;
	}
	
	static unsigned int indexOf(
		unsigned char[] str, unsigned int i,
		unsigned int len, unsigned char[] dst,
		unsigned int start, unsigned int max){
		if (len <= max){
			max = start + max - len;
			unsigned int j;
			while (start <= max){
				j = 0;
				while (j < len){
					if (dst[start + j] != str[i + j]) {break;}
					j = j + 1;
				}
				start = start + 1;
				if (j == len) {return start;}
			}
		}
		return 0;
	}
	
	static unsigned int indexOfReverse(
		unsigned char[] str, unsigned int i,
		unsigned int len, unsigned char[] dst,
		unsigned int end, unsigned int max){
		if (len <= max){
			max = end + max - len + 1;
			unsigned int j;
			while (max > end){
				max = max - 1;
				j = 0;
				while (j < len){
					if (dst[max + j] != str[i + j]) {break;}
					j = j + 1;
				}
				if (j == len) {return max + 1;}
			}
		}
		return 0;
	}
	
	static void reverse(unsigned char[] str,
		unsigned int start, unsigned int len){
		if (len <= 1) {return;}
		len = len + start - 1;
		while (len > start){
			switchUchar(&str[start], &str[len]);
			start = start + 1;
			len = len - 1;
		}
	}

	static void setU16BE(
		unsigned char[] str, unsigned int start,
		unsigned short setShort){
		str[start] = setShort >> 8;
		str[start + 1] = setShort & 0xFF;
	}

	static void setU16LE(
		unsigned char[] str, unsigned int start,
		unsigned short setShort){
		str[start] = setShort & 0xFF;
		str[start + 1] = setShort >> 8;
	}

	static void setU32BE(
		unsigned char[] str, unsigned int start,
		unsigned int setInt){
		str[start] = setInt >> 24;
		str[start + 1] = setInt >> 16 & 0xFF;
		str[start + 2] = setInt >> 8 & 0xFF;
		str[start + 3] = setInt & 0xFF;
	}

	static void setU32LE(
		unsigned char[] str, unsigned int start,
		unsigned int setInt){
		str[start] = setInt & 0xFF;
		str[start + 1] = setInt >> 8 & 0xFF;
		str[start + 2] = setInt >> 16 & 0xFF;
		str[start + 3] = setInt >> 24;
	}

	static unsigned short getU16BE(
		unsigned char[] str, unsigned int start){
		return str[start] << 8 | str[start + 1];
	}

	static unsigned short getU16LE(
		unsigned char[] str, unsigned int start){
		return str[start] | str[start + 1] << 8;
	}

	static unsigned int getU32BE(
		unsigned char[] str, unsigned int start){
		return str[start] << 24 | str[start + 1] << 16 |
			str[start + 2] << 8 | str[start + 3];
	}

	static unsigned int getU32LE(
		unsigned char[] str, unsigned int start){
		return str[start] | str[start + 1] << 8 |
			str[start + 2] << 16 | str[start + 3] << 24;
	}
	
	/* Returns str's length if all occurences of src
		would be replaced with dst. */
	static unsigned int replacedLength(
		unsigned char[] str, unsigned int strStart,
		unsigned int strLen, unsigned char[] src,
		unsigned int srcStart, unsigned int srcLen,
		unsigned int dstLen){
		unsigned int addLen = 0;
		if (srcLen == 0) {return strLen;}
		strLen = strLen + strStart;
		while (strStart < strLen){
			if (strLen - strStart >= srcLen){
				if (std::Memory::compare(str, strStart,
					src, srcStart, srcLen) == 0){
					addLen = addLen + dstLen;
					strStart = strStart + srcLen;
					continue;
				}
			}
			addLen = addLen + 1;
			strStart = strStart + 1;
		}
		return addLen;
	}
	
	/* Sets str to the data but
		all occurences of src is replaced with dst.
		Currently does not support if cStr is a substring of data. */
	static void setReplace(
		unsigned char[] data, unsigned int dataStart,
		unsigned char[] str, unsigned int strStart,
		unsigned int strLen, unsigned char[] src,
		unsigned int srcStart, unsigned int srcLen,
		unsigned char[] dst, unsigned int dstStart,
		unsigned int dstLen){
		strLen = strLen + strStart;
		while (strStart < strLen){
			if (strLen - strStart >= srcLen){
				if (std::Memory::compare(str, strStart,
					src, srcStart, srcLen) == 0){
					std::Memory::copy(dst, dstStart,
						data, dataStart, dstLen);
					dataStart = dataStart + dstLen;
					strStart = strStart + srcLen;
					continue;
				}
			}
			data[dataStart] = str[strStart];
			dataStart = dataStart + 1;
			strStart = strStart + 1;
		}
	}

	static void copyJsArray(void* src,
		unsigned int srcStart, unsigned char[] dst,
		unsigned int dstStart, unsigned int len){
		while (len > 0){
			len = len - 1;
			unsigned char srcChar;
			constwrite "		srcChar = src[srcStart + len];\n";
			dst[dstStart + len] = srcChar;
		}
	}

	static void setJsArray(unsigned char[] src,
		unsigned int srcStart, void* dst,
		unsigned int dstStart, unsigned int len){
		while (len > 0){
			len = len - 1;
			unsigned char memoryChar = src[srcStart + len];
			constwrite "		dst[dstStart + len] = memoryChar;\n";
		}
	}

	static void copyJsView(void* src,
		unsigned int srcStart, unsigned char[] dst,
		unsigned int dstStart, unsigned int len){
		while (len > 0){
			len = len - 1;
			unsigned char srcChar;
			constwrite "		srcChar = src.getUint8(srcStart + len);\n";
			dst[dstStart + len] = srcChar;
		}
	}

	static void setJsView(unsigned char[] src,
		unsigned int srcStart, void* dst,
		unsigned int dstStart, unsigned int len){
		while (len > 0){
			len = len - 1;
			unsigned char memoryChar = src[srcStart + len];
			constwrite "		dst.setUint8(dstStart + len, memoryChar);\n";
		}
	}
	
	/* 0 if equals, + if array > submemory, - otherwise. */
	static char compareArray(
		void* array, unsigned char[] dst,
		unsigned int start, unsigned int len){
		int cmp = compareJsSubArray(array, 0, dst, start, len);
		if (cmp == 0){
			unsigned int arrayLength;
			constwrite "	arrayLength = array.byteLength;\n";
			if (arrayLength != len){
				if (arrayLength > len){
					return 1;
				}
				return -1;
			}
		}
		return cmp;
	}

	static char compareJsSubArray(void* array,
		unsigned int arrayStart, unsigned char[] dst,
		unsigned int dstStart, unsigned int len){
		unsigned int arrayLength;
		constwrite "	arrayLength = array.byteLength;\n";
		if (arrayStart > arrayLength) {return -1;}
		arrayLength = arrayLength - arrayStart;
		unsigned int minLength;
		if (len < arrayLength){
			minLength = len;
		} else {minLength = arrayLength;}
		unsigned int i = 0;
		while (i < minLength){
			unsigned char arrayChar;
			constwrite "		arrayChar = array[arrayStart + i];\n";
			unsigned char memoryChar = dst[dstStart + i];
			if (arrayChar != memoryChar){
				if (arrayChar > memoryChar) {return 1;}
				return -1;
			}
			i = i + 1;
		}
		if (len == minLength) {return 0;}
		return -1;
	}
	
	static char compareJsView(
		void* view, unsigned char[] dst,
		unsigned int start, unsigned int len){
		int cmp = compareJsSubView(view, 0, dst, start, len);
		if (cmp == 0){
			unsigned int viewLength;
			constwrite "	viewLength = view.byteLength;\n";
			if (viewLength != len){
				if (viewLength > len){
					return 1;
				}
				return -1;
			}
		}
		return cmp;
	}

	/* 0 if equals, + if view > submemory, - otherwise. */
	static char compareJsSubView(void* view,
		unsigned int viewStart, unsigned char[] dst,
		unsigned int dstStart, unsigned int len){
		unsigned int viewLength;
		constwrite "	viewLength = view.byteLength;\n";
		if (viewStart > viewLength) {return -1;}
		viewLength = viewLength - viewStart;
		unsigned int minLength;
		if (len < viewLength){
			minLength = len;
		} else {minLength = viewLength;}
		unsigned int i = 0;
		while (i < minLength){
			unsigned char viewChar;
			constwrite "		viewChar = view.getUint8(viewStart + i);\n";
			unsigned char memoryChar = dst[dstStart + i];
			if (viewChar != memoryChar){
				if (viewChar > memoryChar) {return 1;}
				return -1;
			}
			i = i + 1;
		}
		if (len == minLength) {return 0;}
		return -1;
	}

	static void* getJsArray(unsigned char[] src,
		unsigned int i, unsigned int len){
		void* array;
		constwrite "	array = new Uint8Array(new ArrayBuffer(len));\n";
		while (len > 0){
			len = len - 1;
			unsigned char memoryChar = src[i + len];
			constwrite "		array[len] = memoryChar;\n";
		}
		return array;
	}

}