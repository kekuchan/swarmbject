/*
Copyright (c) 2022-2023 SWARMBJECT contributors

Redistribution and use in source and binary forms,
with or without modification, are permitted
provided that the following conditions are met:

1. Redistributions of source code must
retain the above copyright notice, this list
of conditions and the following disclaimer.

2. Redistributions in binary form must
reproduce the above copyright notice,
this list of conditions and the following
disclaimer in the documentation and/or other
materials provided with the distribution.

Subject to the terms and conditions of this
license, each copyright holder and contributor
hereby grants to those receiving rights under this
license a perpetual, worldwide, non-exclusive,
no-charge, royalty-free, irrevocable (except for
failure to satisfy the conditions of this license)
patent license to make, have made, use, offer to
sell, sell, import, and otherwise transfer this
software, where such license applies only to
those patent claims, already acquired or hereafter
acquired, licensable by such copyright holder or
contributor that are necessarily infringed by:

(a) their Contribution(s) (the licensed
copyrights of copyright holders and
non-copyrightable additions of contributors,
in source or binary form) alone; or

(b) combination of their Contribution(s)
with the work of authorship to which such
Contribution(s) was added by such copyright
holder or contributor, if, at the time the
Contribution is added, such addition causes
such combination to be necessarily infringed.
The patent license shall not apply to any other
combinations which include the Contribution.

Except as expressly stated above, no rights or
licenses from any copyright holder or contributor
is granted under this license, whether expressly,
by implication, estoppel or otherwise.

DISCLAIMER

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS
AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
*/
/* Balanced binary tree */
class BalBinTree {

	void* leftOrParent;
	void* parentOrLeft;
	void* right;
	
	BalBinTree(){
		leftOrParent = nullptr;
		parentOrLeft = nullptr;
		right = nullptr;
	}
	
	static void clearTree(void* node,
		std::ds::BalBinTree*(void*) getTree,
		void(void*) onErase,
		void* parent){
		if (node != nullptr){
			std::ds::BalBinTree* tree = getTree(node);
			void** left;
			void** parentNode;
			if (tree->parentOrLeft == parent){
				left = &tree->leftOrParent;
				parentNode = &tree->parentOrLeft;
			} else {
				left = &tree->parentOrLeft;
				parentNode = &tree->leftOrParent;
			}
			parent = node;
			node = *left;
			*left = nullptr;
			clearTree(node, getTree, onErase, parent);
			node = tree->right;
			tree->right = nullptr;
			clearTree(node, getTree, onErase, parent);
			*parentNode = nullptr;
			if (onErase != nullptr) {onErase(parent);}
		}
	}

	static unsigned char createTree(void* src, 
		unsigned int start, unsigned int max,
		void*(void*, unsigned int) getElement,
		std::ds::BalBinTree*(void*) getTree,
		void* parent, unsigned char leftLevel,
		void** node){
		unsigned int mid = (max + start) >> 1;
		void* element = getElement(src, mid);
		std::ds::BalBinTree* tree = getTree(element);
		tree->parentOrLeft = parent;
		unsigned char level = 0;
		if (mid > start){
			level = createTree(
				src, start, mid - 1,
				getElement, getTree, element,
				255, &tree->leftOrParent);
			/*The left tree can not have a 
			greater level than the right tree.*/
		}
		if (max > mid){
			level = createTree(
				src, mid + 1, max,
				getElement, getTree, element,
				level, &tree->right);
		}
		*node = element;
		if (leftLevel == level){
			std::val::Ptr::swap(
				&tree->leftOrParent, &tree->parentOrLeft);
		}
		return level + 1;
	}

	/* Public member functions. */

	static void clear(void* root,
		std::ds::BalBinTree*(void*) getTree,
		void(void*) onErase){
		clearTree(root, getTree, onErase, nullptr);
	}
	
	/* The two callbacks could be combined, 
		but they are kept separate, for a 
		possible non-recursive rewrite. */
	static void* create(void* src, 
		unsigned int i, unsigned int len,
		void*(void*, unsigned int) getElement,
		std::ds::BalBinTree*(void*) getTree){
		void* node = nullptr;
		if (len > 0){
			createTree(src, i, i + len - 1,
				getElement, getTree, nullptr, 255, &node);
		}
		return node;
	}
	
	static void erase(
		void** root, void* node,
		std::ds::BalBinTree*(void*) getTree,
		unsigned char(void*, void*) compare){
		std::ds::BalBinTree* tree = getTree(node);
		void* parent = tree->parentOrLeft;
		std::ds::BalBinTree* parentTree;
		void* left;
		void* right;
		std::ds::BalBinTree* leftTree;
		if (parent == nullptr){
			if (node != *root){
				left = nullptr;
				leftTree = nullptr;
				parent = tree->leftOrParent;
				if (parent != nullptr){
					parentTree = getTree(parent);
				} else {parentTree = nullptr;}
			} else {
				left = tree->leftOrParent;
				if (left != nullptr){
					leftTree = getTree(left);
				} else {leftTree = nullptr;}
				parentTree = nullptr;
			}
		} else {
			parentTree = getTree(parent);
			if (parentTree->right == node ||
				compare(node, parent) == 
					std::Compare::less){
				left = tree->leftOrParent;
				if (left != nullptr){
					leftTree = getTree(left);
				} else {leftTree = nullptr;}
			} else {
				left = parent;
				parent = tree->leftOrParent;
				leftTree = parentTree;
				if (parent != nullptr){
					parentTree = getTree(parent);
				} else {parentTree = nullptr;}
			}
		}
		std::ds::BalBinTree* rightTree;
		if (tree->right != nullptr){
			rightTree = getTree(tree->right);
		} else {rightTree = nullptr;}
		void* parentNext;
		std::ds::BalBinTree* parentNextTree;
		void* nodeNext;
		std::ds::BalBinTree* nodeNextTree;
		if (leftTree != nullptr /* && (
			leftTree->parentOrLeft != node || 
			rightTree->parentOrLeft == node)
			could be used to take the node from the 
			deeper side, but then the right side 
			would need this ammount of code too. */
			){
			nodeNext = leftTree->right;
			parentNext = left;
			parentNextTree = leftTree;
			if (nodeNext != nullptr){
				nodeNextTree = getTree(nodeNext);
				while (nodeNextTree->right != nullptr){
					parentNext = nodeNext;
					parentNextTree = nodeNextTree;
					nodeNext = nodeNextTree->right;
					nodeNextTree = getTree(nodeNext);
				}
				if (leftTree->parentOrLeft == node){
					leftTree->parentOrLeft = nodeNext;
				} else {
					leftTree->leftOrParent = nodeNext;
				}
				if (nodeNextTree->parentOrLeft == 
					parentNext){
					left = nodeNextTree->leftOrParent;
					if (left != nullptr){
						leftTree = getTree(left);
						leftTree->leftOrParent = nullptr;
						leftTree->parentOrLeft = parentNext;
					} else {leftTree = nullptr;}
				} else {
					left = nodeNextTree->parentOrLeft;
					if (left != nullptr){
						leftTree = getTree(left);
						leftTree->leftOrParent = parentNext;
					} else {leftTree = nullptr;}
				}
				parentNextTree->right = left;
				nodeNextTree->parentOrLeft =
					tree->parentOrLeft;
				nodeNextTree->leftOrParent = 
					tree->leftOrParent;
			} else {
				nodeNext = left;
				nodeNextTree = leftTree;
				if (nodeNextTree->parentOrLeft == node){
					left = nodeNextTree->leftOrParent;
					if (left != nullptr){
						leftTree = getTree(left);
						leftTree->leftOrParent = nullptr;
						leftTree->parentOrLeft = nodeNext;
					} else {leftTree = nullptr;}
					if (tree->parentOrLeft == parent){
						nodeNextTree->parentOrLeft = parent;
					} else {
						nodeNextTree->parentOrLeft = left;
						nodeNextTree->leftOrParent = parent;
					}
				} else {
					left = nodeNextTree->parentOrLeft;
					if (left != nullptr){
						leftTree = getTree(left);
					} else {leftTree = nullptr;}
					if (tree->parentOrLeft == parent){
						nodeNextTree->leftOrParent = left;
						nodeNextTree->parentOrLeft = parent;
					} else {
						nodeNextTree->leftOrParent = parent;
					}
				}
			}
			nodeNextTree->right = tree->right;
			if (rightTree != nullptr){
				if (rightTree->parentOrLeft == node){
					rightTree->parentOrLeft = nodeNext;
				} else {
					rightTree->leftOrParent = nodeNext;
				}
			}
		} else {
			if (rightTree != nullptr){
				if (tree->parentOrLeft == parent){
					rightTree->parentOrLeft = parent;
					rightTree->leftOrParent = nullptr;
				} else {
					rightTree->leftOrParent = parent;
				}
			}
			nodeNext = tree->right;
			left = nodeNext;
			leftTree = rightTree;
			parentNext = parent;
			parentNextTree = parentTree;
		}
		if (parentTree != nullptr){
			if (parentTree->right == node){
				parentTree->right = nodeNext;
			} else if (parentTree->parentOrLeft == node){
				parentTree->parentOrLeft = nodeNext;
			} else {
				parentTree->leftOrParent = nodeNext;
			}
		} else {
			*root = nodeNext;
			if (nodeNext == nullptr) {return;}
		}
		tree->right = nullptr;
		tree->parentOrLeft = nullptr;
		tree->leftOrParent = nullptr;
		node = left;
		tree = leftTree;
		parent = parentNext;
		parentTree = parentNextTree;
		while (true){
			if (parentTree->right == node){
				parentNext = 
					parentTree->parentOrLeft;
				if (parentNext == nullptr){
					parentNextTree = nullptr;
					if (parent != *root){
						left = nullptr;
						leftTree = nullptr;
						parentNext = 
							parentTree->leftOrParent;
					} else {
						left = parentTree->leftOrParent;
						if (left != nullptr){
							leftTree = getTree(left);
						} else {leftTree = nullptr;}
					}
				} else {
					parentNextTree = getTree(parentNext);
					if (parentNextTree->right == parent ||
						compare(parent, parentNext) == 
							std::Compare::less){
						left = parentTree->leftOrParent;
						if (left != nullptr){
							leftTree = getTree(left);
						} else {leftTree = nullptr;}
					} else {
						left = parentNext;
						parentNext = 
							parentTree->leftOrParent;
						leftTree = parentNextTree;
						parentNextTree = nullptr;
					}
				}
				if (left != nullptr){
					if (leftTree->parentOrLeft == parent){
						if (node == nullptr || 
							tree->parentOrLeft == parent){
							leftTree->parentOrLeft = 
								leftTree->leftOrParent;
							leftTree->leftOrParent = parent;
							break;
						} else {
							tree->leftOrParent = 
								tree->parentOrLeft;
							tree->parentOrLeft = parent;
						}
					} else {
						if (node == nullptr){
							if (leftTree->parentOrLeft == nullptr && 
								leftTree->right == nullptr){
								break;
							}
						} else if (tree->parentOrLeft != parent){
							tree->leftOrParent = 
								tree->parentOrLeft;
							tree->parentOrLeft = parent;
							break;
						}
						bool same = false;
						right = leftTree->right;
						if (leftTree->parentOrLeft != nullptr){
							if (right != nullptr){
								nodeNext = leftTree->parentOrLeft;
								nodeNextTree = getTree(nodeNext);
								rightTree = getTree(right);
								if (nodeNextTree->parentOrLeft == left){
									if (rightTree->parentOrLeft == left){
										rightTree->parentOrLeft = 
											rightTree->leftOrParent;
										rightTree->leftOrParent = parent;
										nodeNext = left;
										same = true;
									} else {
										nodeNext = right;
										nodeNextTree = rightTree;
									}
								} else if (rightTree->parentOrLeft == 
									left){
									rightTree->parentOrLeft = parent;
									nodeNext = left;
								} else {
									nodeNextTree->leftOrParent =
										nodeNextTree->parentOrLeft;
									nodeNextTree->parentOrLeft = left;
									rightTree->leftOrParent = parent;
									nodeNext = left;
									same = true;
								}
							} else {
								nodeNext = left;
							}
						} else {
							nodeNext = right;
							nodeNextTree = getTree(nodeNext);
						}
						if (right == nodeNext){
							leftTree->right = 
								nodeNextTree->parentOrLeft;
							leftTree->leftOrParent = nodeNext;
							nodeNextTree->parentOrLeft = left;
							left = leftTree->parentOrLeft;
							if (leftTree->right == nullptr){
								leftTree = nullptr;
							} else {
								leftTree = getTree(leftTree->right);
							}
							if (leftTree != nullptr &&
								leftTree->parentOrLeft != nodeNext){
								leftTree->leftOrParent = 
									leftTree->parentOrLeft;
								leftTree->parentOrLeft = 
									nodeNextTree->parentOrLeft;
								tree->parentOrLeft = 
									tree->leftOrParent;
								tree->leftOrParent = parent;
								left = nodeNextTree->right;
								if (left != nullptr){
									leftTree = getTree(left);
									if (leftTree->parentOrLeft == right){
										leftTree->parentOrLeft = parent;
									} else {
										leftTree->leftOrParent = parent;
									}
								}
							} else if (left != nullptr){
								if (leftTree != nullptr){
									leftTree->parentOrLeft = 
										nodeNextTree->parentOrLeft;
								}
								leftTree = getTree(left);
								leftTree->parentOrLeft = 
									leftTree->leftOrParent;
								leftTree->leftOrParent = 
									nodeNextTree->parentOrLeft;
								left = nodeNextTree->right;
								if (left != nullptr){
									leftTree = getTree(left);
									if (leftTree->parentOrLeft == 
										right){
										leftTree->parentOrLeft = 
											leftTree->leftOrParent;
										leftTree->leftOrParent = parent;
									} else {
										leftTree->leftOrParent = 
											leftTree->parentOrLeft;
										leftTree->parentOrLeft = parent;
									}
								}
							}
							leftTree = nodeNextTree;
							left = nodeNext;
							nodeNext = nodeNextTree->leftOrParent;
						}
						if (parentTree->leftOrParent == nodeNext){
							leftTree->leftOrParent = 
								leftTree->parentOrLeft;
							leftTree->parentOrLeft = parentNext;
						} else {
							leftTree->leftOrParent = parentNext;
						}
						parentTree->parentOrLeft = 
							leftTree->right;
						parentTree->leftOrParent = left;
						leftTree->right = parent;
						if (parentNext != nullptr){
							parentNextTree = getTree(parentNext);
							if (parentNextTree->right == 
								parent){
								parentNextTree->right = left;
							} else if (parentNextTree->leftOrParent == 
								parent){
								parentNextTree->leftOrParent = left;
							} else {
								parentNextTree->parentOrLeft = left;
							}
						} else {*root = left;}
						if (same) {break;}
						parent = left;
						parentTree = leftTree;
					}
				}
			} else {
				if (parentTree->leftOrParent == node){
					parentNext = 
						parentTree->parentOrLeft;
				} else {
					parentNext = 
						parentTree->leftOrParent;
				}
				parentNextTree = nullptr;
				right = parentTree->right;
				rightTree = getTree(right);
				if (rightTree->parentOrLeft == parent){
					if (node == nullptr || 
						tree->parentOrLeft == parent){
						rightTree->parentOrLeft = 
							rightTree->leftOrParent;
						rightTree->leftOrParent = parent;
						break;
					} else {
						tree->leftOrParent = tree->parentOrLeft;
						tree->parentOrLeft = parent;
					}
				} else {
					if (node == nullptr){
						if (rightTree->parentOrLeft == nullptr && 
							rightTree->right == nullptr){
							break;
						}
					} else if (tree->parentOrLeft != parent){
						tree->leftOrParent = tree->parentOrLeft;
						tree->parentOrLeft = parent;
						break;
					}
					bool same = false;
					left = rightTree->parentOrLeft;
					if (rightTree->right != nullptr){
						if (left != nullptr){
							nodeNext = rightTree->right;
							nodeNextTree = getTree(nodeNext);
							leftTree = getTree(left);
							if (nodeNextTree->parentOrLeft == right){
								if (leftTree->parentOrLeft == right){
									leftTree->parentOrLeft = 
										leftTree->leftOrParent;
									leftTree->leftOrParent = parent;
									nodeNext = parent;
									same = true;
								} else {
									nodeNext = left;
									nodeNextTree = leftTree;
								}
							} else if (leftTree->parentOrLeft == 
								right){
								leftTree->parentOrLeft = parent;
								nodeNext = parent;
							} else {
								nodeNextTree->leftOrParent = 
									nodeNextTree->parentOrLeft;
								nodeNextTree->parentOrLeft = right;
								leftTree->leftOrParent = parent;
								nodeNext = parent;
								same = true;
							}
						} else {
							nodeNext = parent;
						}
					} else {
						nodeNext = left;
						nodeNextTree = getTree(nodeNext);
					}
					if (left == nodeNext){
						rightTree->parentOrLeft = 
							nodeNextTree->right;
						rightTree->leftOrParent = nodeNext;
						nodeNextTree->right = right;
						right = rightTree->right;
						if (rightTree->parentOrLeft == nullptr){
							rightTree = nullptr;
						} else {
							rightTree = getTree(
								rightTree->parentOrLeft);
						}
						if (rightTree != nullptr &&
							rightTree->parentOrLeft != nodeNext){
							rightTree->leftOrParent = 
								rightTree->parentOrLeft;
							rightTree->parentOrLeft = 
								nodeNextTree->right;
							tree->parentOrLeft = tree->leftOrParent;
							tree->leftOrParent = parent;
							right = nodeNextTree->parentOrLeft;
							if (right != nullptr){
								rightTree = getTree(right);
								if (rightTree->parentOrLeft == left){
									rightTree->parentOrLeft = parent;
								} else {
									rightTree->leftOrParent = parent;
								}
							}
						} else if (right != nullptr){
							if (rightTree != nullptr){
								rightTree->parentOrLeft = 
									nodeNextTree->right;
							}
							rightTree = getTree(right);
							rightTree->parentOrLeft = 
								rightTree->leftOrParent;
							rightTree->leftOrParent = 
								nodeNextTree->right;
							right = nodeNextTree->parentOrLeft;
							if (right != nullptr){
								rightTree = getTree(right);
								if (rightTree->parentOrLeft == left){
									rightTree->parentOrLeft = 
										rightTree->leftOrParent;
									rightTree->leftOrParent = parent;
								} else {
									rightTree->leftOrParent = 
										rightTree->parentOrLeft;
									rightTree->parentOrLeft = parent;
								}
							}
						}
						rightTree = nodeNextTree;
						right = nodeNext;
					}
					parentTree->right = rightTree->parentOrLeft;
					if (parentTree->leftOrParent == node){
						rightTree->parentOrLeft = parentNext;
						rightTree->leftOrParent = parent;
					} else {
						rightTree->parentOrLeft = parent;
						rightTree->leftOrParent = parentNext;
					}
					parentTree->parentOrLeft = node;
					parentTree->leftOrParent = right;
					if (parentNext != nullptr){
						if (parentNextTree == nullptr){
							parentNextTree = 
								getTree(parentNext);
						}
						if (parentNextTree->right == 
							parent){
							parentNextTree->right = right;
						} else if (parentNextTree->leftOrParent == 
							parent){
							parentNextTree->leftOrParent = right;
						} else {
							parentNextTree->parentOrLeft = right;
						}
					} else {*root = right;}
					if (same) {break;}
					parentTree = rightTree;
					parent = right;
				}
			}
			if (parentNext == nullptr) {break;}
			node = parent;
			tree = parentTree;
			parent = parentNext;
			if (parentNextTree == nullptr){
				parentTree = getTree(parent);
			} else {
				parentTree = parentNextTree;
			}
		}
	}
	
	static void* find(
		void* root, void* node,
		std::ds::BalBinTree*(void*) getTree,
		unsigned char(void*, void*) compare){
		void* parent = nullptr;
		std::ds::BalBinTree* tree;
		while (root != nullptr){
			switch (compare(root, node)){
				case std::Compare::less:
					parent = root;
					root = getTree(root)->right;
					continue;
				case std::Compare::equal:
					break;
				case std::Compare::greater:
					tree = getTree(root);
					if (tree->parentOrLeft == parent){
						parent = root;
						root = tree->leftOrParent;
					} else {
						parent = root;
						root = tree->parentOrLeft;
					}
					continue;
			}
			break;
		}
		return root;
	}
	
	static void* first(void* root,
		std::ds::BalBinTree*(void*) getTree){
		if (root != nullptr){
			void* parent = nullptr;
			void* left;
			while (true){
				std::ds::BalBinTree* tree = getTree(root);
				left = tree->parentOrLeft;
				if (left == parent)
					{left = tree->leftOrParent;}
				if (left == nullptr) {break;}
				parent = root;
				root = left;
			}
		}
		return root;
	}
	
	static void insert(
		void** root, void* node,
		std::ds::BalBinTree*(void*) getTree,
		unsigned char(void*, void*) compare){
		void* parent = *root;
		if (parent != nullptr){
			std::ds::BalBinTree* tree;
			std::ds::BalBinTree* parentTree;
			void* parentNext = nullptr;
			while (true){
				parentTree = getTree(parent);
				if (compare(parent, node) == 
					std::Compare::less){
					if (parentTree->right != nullptr){
						parentNext = parent;
						parent = parentTree->right;
					} else {
						parentTree->right = node;
						break;
					}
				} else {
					void** left;
					if (parentTree->parentOrLeft == 
						parentNext){
						left = &parentTree->leftOrParent;
					} else {
						left = &parentTree->parentOrLeft;
					}
					if (*left != nullptr){
						parentNext = parent;
						parent = *left;
					} else {
						*left = node;
						break;
					}
				}
			}
			tree = getTree(node);
			tree->parentOrLeft = parent;
			void* left;
			std::ds::BalBinTree* leftTree;
			std::ds::BalBinTree* rightTree;
			std::ds::BalBinTree* parentNextTree;
			void* nodeNext = nullptr;
			std::ds::BalBinTree* nodeNextTree;
			while (true){
				if (parentTree->right == node){
					parentNext = 
						parentTree->parentOrLeft;
					if (parentNext == nullptr){
						parentNextTree = nullptr;
						if (parent != *root){
							left = nullptr;
							leftTree = nullptr;
							parentNext = 
								parentTree->leftOrParent;
						} else {
							left = parentTree->leftOrParent;
							if (left != nullptr){
								leftTree = getTree(left);
							} else {leftTree = nullptr;}
						}
					} else {
						parentNextTree = getTree(parentNext);
						if (parentNextTree->right == parent ||
							compare(parent, parentNext) == 
								std::Compare::less){
							left = parentTree->leftOrParent;
							if (left != nullptr){
								leftTree = getTree(left);
							} else {leftTree = nullptr;}
						} else {
							left = parentNext;
							parentNext = 
								parentTree->leftOrParent;
							leftTree = parentNextTree;
							parentNextTree = nullptr;
						}
					}
					if (tree->parentOrLeft == parent){
						std::val::Ptr::swap(
							&tree->leftOrParent, 
							&tree->parentOrLeft);
						if (leftTree != nullptr &&
							leftTree->parentOrLeft != parent)
								{break;}
					} else if (leftTree == nullptr ||
						leftTree->parentOrLeft == parent){
						if (tree->right != nodeNext){
							tree->parentOrLeft = 
								nodeNextTree->right;
							tree->leftOrParent = nodeNext;
							nodeNextTree->right = node;
							node = tree->right;
							if (tree->parentOrLeft == nullptr){
								tree = nullptr;
							} else {
								tree = getTree(tree->parentOrLeft);
							}
							if (tree != nullptr &&
								tree->parentOrLeft != nodeNext){
								tree->leftOrParent = 
									tree->parentOrLeft;
								tree->parentOrLeft = 
									nodeNextTree->right;
								leftTree->parentOrLeft = 
									leftTree->leftOrParent;
								leftTree->leftOrParent = parent;
								node = nodeNextTree->parentOrLeft;
								if (node != nullptr){
									getTree(node)->parentOrLeft = 
										parent;
								}
							} else if (node != nullptr){
								if (tree != nullptr){
									tree->parentOrLeft = 
										nodeNextTree->right;
								}
								tree = getTree(node);
								tree->parentOrLeft = 
									tree->leftOrParent;
								tree->leftOrParent = 
									nodeNextTree->right;
								node = nodeNextTree->parentOrLeft;
								if (node != nullptr){
									tree = getTree(node);
									tree->leftOrParent = 
										tree->parentOrLeft;
									tree->parentOrLeft = parent;
								}
							}
							tree = nodeNextTree;
							node = nodeNext;
						} else if (tree->parentOrLeft != nullptr){
							getTree(tree->parentOrLeft)->
								parentOrLeft = parent;
						}
						parentTree->right = tree->parentOrLeft;
						if (parentTree->leftOrParent == left){
							tree->parentOrLeft = parentNext;
							tree->leftOrParent = parent;
						} else {
							tree->parentOrLeft = parent;
							tree->leftOrParent = parentNext;
						}
						parentTree->parentOrLeft = left;
						parentTree->leftOrParent = node;
						if (parentNext != nullptr){
							if (parentNextTree == nullptr){
								parentNextTree = 
									getTree(parentNext);
							}
							if (parentNextTree->right == 
								parent){
								parentNextTree->right = node;
							} else if (parentNextTree->leftOrParent == 
								parent){
								parentNextTree->leftOrParent = node;
							} else {
								parentNextTree->parentOrLeft = node;
							}
						} else {*root = node;}
						break;
					} else {
						std::val::Ptr::swap(
							&leftTree->leftOrParent, 
							&leftTree->parentOrLeft);
					}
				} else {
					if (parentTree->leftOrParent == node){
						parentNext = 
							parentTree->parentOrLeft;
					} else {
						parentNext = 
							parentTree->leftOrParent;
					}
					if (parentTree->right != nullptr){
						rightTree = getTree(parentTree->right);
					} else {
						rightTree = nullptr;
					}
					if (tree->parentOrLeft == parent){
						std::val::Ptr::swap(
							&tree->leftOrParent, 
							&tree->parentOrLeft);
						if (rightTree != nullptr &&
							rightTree->parentOrLeft != parent)
								{break;}
					} else if (rightTree == nullptr ||
						rightTree->parentOrLeft == parent){
						if (tree->right == nodeNext){
							tree->right = 
								nodeNextTree->parentOrLeft;
							tree->leftOrParent = nodeNext;
							nodeNextTree->parentOrLeft = node;
							node = tree->parentOrLeft;
							if (tree->right == nullptr){
								tree = nullptr;
							} else {
								tree = getTree(tree->right);
							}
							if (tree != nullptr &&
								tree->parentOrLeft != nodeNext){
								tree->leftOrParent = 
									tree->parentOrLeft;
								tree->parentOrLeft = 
									nodeNextTree->parentOrLeft;
								rightTree->parentOrLeft = 
									rightTree->leftOrParent;
								rightTree->leftOrParent = parent;
								node = nodeNextTree->right;
								if (node != nullptr){
									getTree(node)->parentOrLeft = 
										parent;
								}
							} else if (node != nullptr){
								if (tree != nullptr){
									tree->parentOrLeft = 
										nodeNextTree->parentOrLeft;
								}
								tree = getTree(node);
								tree->parentOrLeft = 
									tree->leftOrParent;
								tree->leftOrParent = 
									nodeNextTree->parentOrLeft;
								node = nodeNextTree->right;
								if (node != nullptr){
									tree = getTree(node);
									tree->leftOrParent = 
										tree->parentOrLeft;
									tree->parentOrLeft = parent;
								}
							}
							tree = nodeNextTree;
							node = nodeNext;
						} else if (tree->right != nullptr){
							getTree(tree->right)->parentOrLeft = 
								parent;
						}
						if (parentTree->leftOrParent == 
							nodeNextTree->leftOrParent){
							tree->leftOrParent = 
								tree->parentOrLeft;
							tree->parentOrLeft = parentNext;
						} else {
							tree->leftOrParent = parentNext;
						}
						parentTree->parentOrLeft = tree->right;
						parentTree->leftOrParent = node;
						tree->right = parent;
						if (parentNext != nullptr){
							parentNextTree = getTree(parentNext);
							if (parentNextTree->right == 
								parent){
								parentNextTree->right = node;
							} else if (parentNextTree->leftOrParent == 
								parent){
								parentNextTree->leftOrParent = node;
							} else {
								parentNextTree->parentOrLeft = node;
							}
						} else {*root = node;}
						break;
					} else {
						std::val::Ptr::swap(
							&rightTree->leftOrParent,
							&rightTree->parentOrLeft);
					}
				}
				if (parentNext == nullptr) {break;}
				nodeNext = node;
				nodeNextTree = tree;
				node = parent;
				tree = parentTree;
				parent = parentNext;
				parentTree = getTree(parent);
			}
		} else {
			*root = node;
		}
	}
	
	static void* last(void* node,
		std::ds::BalBinTree*(void*) getTree){
		if (node != nullptr){
			while (true){
				std::ds::BalBinTree* tree = getTree(node);
				if (tree->right == nullptr) {break;}
				node = tree->right;
			}
		}
		return node;
	}

	static void* max(
		void* root, void* node,
		std::ds::BalBinTree*(void*) getTree,
		unsigned char(void*, void*) compare){
		void* parent = nullptr;
		void* parentNext = nullptr;
		std::ds::BalBinTree* tree;
		while (root != nullptr){
			switch (compare(root, node)){
				case std::Compare::less:
					parent = root;
					parentNext = root;
					root = getTree(root)->right;
					continue;
				case std::Compare::equal:
					parentNext = root;
					break;
				case std::Compare::greater:
					tree = getTree(root);
					if (tree->parentOrLeft == parent){
						parent = root;
						root = tree->leftOrParent;
					} else {
						parent = root;
						root = tree->parentOrLeft;
					}
					continue;
			}
			break;
		}
		return parentNext;
	}

	static void* min(
		void* root, void* node,
		std::ds::BalBinTree*(void*) getTree,
		unsigned char(void*, void*) compare){
		void* parent = nullptr;
		void* parentNext = nullptr;
		std::ds::BalBinTree* tree;
		while (root != nullptr){
			switch (compare(root, node)){
				case std::Compare::less:
					parent = root;
					root = getTree(root)->right;
					continue;
				case std::Compare::equal:
					parentNext = root;
					break;
				case std::Compare::greater:
					parentNext = root;
					tree = getTree(root);
					if (tree->parentOrLeft == parent){
						root = tree->leftOrParent;
					} else {
						root = tree->parentOrLeft;
					}
					parent = parentNext;
					continue;
			}
			break;
		}
		return parentNext;
	}
	
	static void* debug(void* node){
		std::str::DString string;
		string.addUint(
			(Node*)node->number,
			std::NumberBases::decimal);
		string.debug();
	}
	
	static void* next(void* node,
		std::ds::BalBinTree*(void*) getTree,
		unsigned char(void*, void*) compare){
		std::ds::BalBinTree* tree = getTree(node);
		void* parent;
		if (tree->right != nullptr){
			void* left;
			parent = node;
			node = tree->right;
			while (true){
				tree = getTree(node);
				left = tree->parentOrLeft;
				if (left == parent)
					{left = tree->leftOrParent;}
				if (left == nullptr) {break;}
				parent = node;
				node = left;
			}
		} else {
			std::ds::BalBinTree* parentTree;
			while (true){
				parent = tree->parentOrLeft;
				if (parent != nullptr){
					parentTree = tree;
					tree = getTree(parent);
					if (tree->right != node &&
						compare(node, parent) != 
							std::Compare::less){
						parent = 
							parentTree->leftOrParent;
						if (parent == nullptr){
							node = nullptr;
							break;
						}
						tree = getTree(parent);
					}
					if (tree->right != node){
						node = parent;
						break;
					}
				} else {
					parent = tree->leftOrParent;
					if (parent == nullptr){
						node = nullptr;
						break;
					}
					tree = getTree(parent);
					if (tree->right != node){
						if (compare(node, parent) != 
							std::Compare::less){
							node = nullptr;
						} else {
							node = parent;
						}
						break;
					}
				}
				node = parent;
			}
		}
		return node;
	}
	
	static void* previous(void* node,
		std::ds::BalBinTree*(void*) getTree,
		unsigned char(void*, void*) compare){
		std::ds::BalBinTree* tree = getTree(node);
		void* left;
		void* parent = tree->parentOrLeft;
		std::ds::BalBinTree* parentTree;
		if (parent != nullptr){
			left = tree->leftOrParent;
			tree = getTree(parent);
			if (tree->right != node &&
				compare(node, parent) != 
					std::Compare::less){
				left = parent;
			} else if (left != nullptr){
				tree = getTree(left);
			}
		} else {
			parent = tree->leftOrParent;
			if (parent == nullptr)
				{return nullptr;}
			tree = getTree(parent);
			if (tree->right != node &&
				compare(node, parent) != 
					std::Compare::less){
				left = parent;
			} else {
				left = nullptr;
			}
		}
		if (left != nullptr){
			node = left;
			while (true){
				if (tree->right == nullptr) {break;}
				node = tree->right;
				tree = getTree(node);
			}
		} else {
			std::ds::BalBinTree* parentTree;
			while (true){
				if (tree->right == node){
					node = parent;
					break;
				}
				node = parent;
				parent = tree->parentOrLeft;
				if (parent != nullptr){
					parentTree = tree;
					tree = getTree(parent);
					if (tree->right != node &&
						compare(node, parent) != 
							std::Compare::less){
						left = parent;
						parent = 
							parentTree->leftOrParent;
						if (parent == nullptr){
							node = nullptr;
							break;
						}
						tree = getTree(parent);
					} else {
						left = parentTree->leftOrParent;
					}
				} else {
					parent = tree->leftOrParent;
					if (parent == nullptr){
						node = nullptr;
						break;
					}
					tree = getTree(parent);
					if (tree->right != node &&
						compare(node, parent) != 
							std::Compare::less){
						node = nullptr;
						break;
					}
					left = nullptr;
				}
			}
		}
		return node;
	}
	
}